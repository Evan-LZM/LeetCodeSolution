package main

import (
	"fmt"
	"reflect"
	"strconv"
)

type Human struct {
	name  string
	age   int
	phone string
}

type Student struct {
	Human
	school string
	loan   float32
}

type Employee struct {
	Human
	company string
	money   float32
}

func (h Human) Sayhi() {
	fmt.Printf("Hi, I am %s, you can call me on %s\n", h.name, h.phone)
}

func (h Human) Sing(lyrics string) {
	fmt.Println("I am sing prove that I am so happy, %s", lyrics)
}

//Employee reload Human's Sayhi method
func (e Employee) Sayhi() {
	fmt.Printf("Hi, I am %s, I work at %s, Call me on %s\n", e.name, e.company, e.phone)
}

//interface Men has been reliase by Human, Student,Employee because these three struct all realise Sayhi and Sing function
type Men interface {
	Sayhi()
	Sing(lyrics string)
}

func (h Human) String() string {
	return "<" + h.name + " - " + strconv.Itoa(h.age) + " years - " + h.phone + ">"
}

type Element interface{}
type List []Element
type Person struct {
	name string
	age  int
}

func (p Person) String() string {
	return "(name:" + p.name + "- age:" + strconv.Itoa(p.age) + " years)"
}

func main() {
	list := make(List, 3)
	list[0] = 1
	list[1] = "Hello"
	list[2] = Person{"Mike", 25}
	for index, element := range list {
		switch value := element.(type) {
		case int:
			fmt.Printf("list[%d] is int, and its value is %d\n", index, value)
		case string:
			fmt.Printf("list[%d] is string, and its value is %s\n", index, value)
		case Person:
			fmt.Printf("list[%d] is Person, and its value is %s\n", index, value)
		default:
			fmt.Println("this is a diff type")
		}
	}
	var x float64 = 3.4
	v := reflect.ValueOf(x)
	fmt.Println("type:", v.Type())
	fmt.Println("kind is float64", v.Kind() == reflect.Float64)
	fmt.Println("value:", v.Float())
}
